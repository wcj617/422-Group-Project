00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/22/2021 9:25:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Group Project    
00000000                             3  * Written by :David Woo 
00000000                             4  * Date       :11/7/2021 
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  *   Main program
00000000                             8  *--------------------------------------------------------------------
00000000                             9  
00000000                            10  
00000000                            11  *--------------------------------------------------------------------
00000000                            12  * User Input for staring address
00000000                            13  *--------------------------------------------------------------------
00000000                            14  
00001000                            15  START   ORG     $1000
00001000  183C 0002                 16          MOVE.B  #2,D4                  *for Starting and Ending address                      ; first instruction of program
00001004  43F9 000010DA             17          LEA     GREETING_MSG,A1
0000100A  103C 000E                 18          MOVE.B  #14,D0
0000100E  4E4F                      19          TRAP    #15 
00001010                            20          
00001010                            21          
00001010                            22          
00001010  163C 0008                 23  InputS  MOVE.B     #8,D3            *Read 8 digit hexdecimal value in D3;
00001014  43F9 000011F7             24          LEA        MessageSt,A1
0000101A  103C 000E                 25          MOVE.B     #14,D0
0000101E  4E4F                      26          TRAP       #15  
00001020  103C 0002                 27          MOVE.B     #2,D0                     Trap task 2 does the following:
00001024  4E4F                      28          TRAP       #15             *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00001026  4EF9 0000104C             29          JMP        AtoH
0000102C                            30          
0000102C  4285                      31  InputE  CLR.L      D5
0000102E  4286                      32          CLR.L      D6      
00001030  163C 0008                 33          MOVE.B     #8,D3            *Read 8 digit hexdecimal value in D3;
00001034  43F9 00001215             34          LEA        MessageEn,A1
0000103A  103C 000E                 35          MOVE.B     #14,D0
0000103E  4E4F                      36          TRAP       #15  
00001040  103C 0002                 37          MOVE.B     #2,D0                     Trap task 2 does the following:
00001044  4E4F                      38          TRAP       #15             *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00001046  4EF9 0000104C             39          JMP        AtoH
0000104C                            40          
0000104C  1C19                      41  AtoH    MOVE.B      (A1)+,D6        * move user input data from (A1) to D6          
0000104E  0C06 0030                 42          CMPI.B      #$30,D6
00001052  6D0E                      43          BLT.B       ERR 
00001054  BC3C 0039                 44          CMP.B       #$39,D6 
00001058  6E16                      45          BGT.B       ALPHA    
0000105A  0406 0030                 46          SUBI.B      #$30,D6
0000105E  6000 0026                 47          BRA         AddressCounting
00001062                            48  
00001062  43F9 00001231             49  ERR     LEA         ERRM,A1
00001068  103C 000E                 50          MOVE.B      #14,D0  
0000106C  4E4F                      51          TRAP        #15    
0000106E  60A0                      52          BRA         InputS   
00001070                            53          
00001070  0C06 0041                 54  ALPHA   CMPI.B      #$41,D6 
00001074  6DEC                      55          BLT.B       ERR
00001076  0C06 0046                 56          CMPI.B      #$46,D6 
0000107A  6EE6                      57          BGT.B       ERR 
0000107C  0406 0037                 58          SUBI.B      #$37,D6
00001080  6000 0004                 59          BRA         AddressCounting    
00001084  4E75                      60          RTS
00001086                            61          
00001086  DA06                      62  AddressCounting   ADD.B   D6,D5 
00001088  5303                      63                    SUBI.B  #1,D3  
0000108A  B63C 0000                 64                    CMP.B   #$0,D3    
0000108E  6700 000A                 65                    BEQ     StartingAd          
00001092  E985                      66                    ASL.L   #$04,D5
00001094  B63C 0000                 67                    CMP.B   #$0,D3
00001098  66B2                      68                    BNE     AtoH
0000109A                            69  
0000109A  5304                      70  StartingAd        SUBI.B  #1,D4
0000109C  B83C 0000                 71                    CMP.B   #$0,D4
000010A0  6700 000C                 72                    BEQ     EndingAd
000010A4  23C5 000010D2             73                    MOVE.L  D5,Addr1
000010AA  4EF8 102C                 74                    JMP     InputE
000010AE                            75  
000010AE                            76  ** Addr1 now
000010AE  23C5 000010D6             77  EndingAd          MOVE.L  D5,Addr2                            
000010B4  2E39 000010D2             78                    MOVE.L  Addr1,D7    
000010BA  2439 000010D6             79                    MOVE.L  Addr2,D2
000010C0                            80                  
000010C0                            81                  
000010C0                            82                  
000010C0                            83  ** Jump Table **
000010C0  4EB9 000010CC             84                    JSR     OPCODE_RTS
000010C6  4EB9 000010D2             85                    JSR     OPCODE_JSR
000010CC                            86  
000010CC                            87  
000010CC                            88  OPCODE_RTS:
000010CC  0C78 4E75 0000            89                    CMPI.W   #$4E75,$0000
000010D2                            90  
000010D2                            91  OPCODE_JSR:
000010D2                            92          
000010D2                            93  *---------------------------------------------------------------------
000010D2                            94  *Variable
000010D2                            95  *---------------------------------------------------------------------
000010D2                            96  Addr1       DS.L    1
000010D6                            97  Addr2       DS.L    1   
000010DA                            98  *---------------------------------------------------------------------
000010DA                            99  *MESSAGE
000010DA                           100  *---------------------------------------------------------------------
000010DA  =0000000D                101  CR      EQU     $0D             ASCII code for Carriage Return
000010DA  =0000000A                102  LF      EQU     $0A             ASCII code for Line Feed
000010DA                           103  
000010DA= 57 65 6C 63 6F 6D ...    104  GREETING_MSG    DC.B    'Welcome to A Disassembler for the Motorola MC68000 Microprocessor',CR,LF
0000111D= 54 79 70 65 20 79 ...    105                  DC.B    'Type your address that must be 8 hexdecimal characters',CR,LF
00001155= 54 68 65 20 53 74 ...    106                  DC.B    'The Starting address must be greater than $00001000.',CR,LF
0000118B= 54 68 65 20 65 6E ...    107                  DC.B    'The ending address must be greater than the starting address.',CR,LF 
000011CA= 54 68 65 20 61 64 ...    108                  DC.B    'The address should be even number address!',CR,LF,0
000011F7                           109  
000011F7= 45 6E 74 65 72 20 ...    110  MessageSt               DC.B         'Enter the starting address:',CR,LF,0    
00001215                           111  
00001215= 45 6E 74 65 72 20 ...    112  MessageEn               DC.B         'Enter the Ending address:',CR,LF,0 
00001231                           113  
00001231= 45 6E 74 65 72 20 ...    114  ERRM         DC.B     'Enter Valid hexadecimal value: ', 0
00001251                           115  *---------------------------------------------------------------------          
00001251                           116      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               10D2
ADDR2               10D6
ADDRESSCOUNTING     1086
ALPHA               1070
ATOH                104C
CR                  D
ENDINGAD            10AE
ERR                 1062
ERRM                1231
GREETING_MSG        10DA
INPUTE              102C
INPUTS              1010
LF                  A
MESSAGEEN           1215
MESSAGEST           11F7
OPCODE_JSR          10D2
OPCODE_RTS          10CC
START               1000
STARTINGAD          109A

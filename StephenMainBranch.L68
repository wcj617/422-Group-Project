00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/23/2021 12:45:09 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Group Project    
00000000                             3  * Written by :David Woo, Stephen Swetonic
00000000                             4  * Date       :11/7/2021 
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  *   Main program
00000000                             8  *--------------------------------------------------------------------
00000000                             9  
00000000                            10  
00000000                            11  *--------------------------------------------------------------------
00000000                            12  * User Input for staring address
00000000                            13  *--------------------------------------------------------------------
00000000                            14  
00001000                            15  START   ORG     $1000
00001000  183C 0002                 16          MOVE.B  #2,D4                  *for Starting and Ending address                      ; first instruction of program
00001004  43F9 0000119A             17          LEA     GREETING_MSG,A1
0000100A  103C 000E                 18          MOVE.B  #14,D0
0000100E  4E4F                      19          TRAP    #15 
00001010                            20          
00001010                            21          
00001010                            22          
00001010  163C 0008                 23  InputS  MOVE.B     #8,D3            *Read 8 digit hexdecimal value in D3;
00001014  43F9 000012BA             24          LEA        MessageSt,A1
0000101A  103C 000E                 25          MOVE.B     #14,D0
0000101E  4E4F                      26          TRAP       #15
00001020  103C 0002                 27          MOVE.B     #2,D0                     Trap task 2 does the following:
00001024  4E4F                      28          TRAP       #15             *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00001026  4EF9 0000104C             29          JMP        AtoH
0000102C                            30          
0000102C  4285                      31  InputE  CLR.L      D5
0000102E  4286                      32          CLR.L      D6      
00001030  163C 0008                 33          MOVE.B     #8,D3            *Read 8 digit hexdecimal value in D3;
00001034  43F9 000012D8             34          LEA        MessageEn,A1
0000103A  103C 000E                 35          MOVE.B     #14,D0
0000103E  4E4F                      36          TRAP       #15  
00001040  103C 0002                 37          MOVE.B     #2,D0                     Trap task 2 does the following:
00001044  4E4F                      38          TRAP       #15             *Read string from keyboard and store at (A1), NULL terminated, length retuned in D1.W (max 80)
00001046  4EF9 0000104C             39          JMP        AtoH
0000104C                            40          
0000104C  1C19                      41  AtoH    MOVE.B      (A1)+,D6        * move user input data from (A1) to D6          
0000104E  0C06 0030                 42          CMPI.B      #$30,D6
00001052  6D0E                      43          BLT.B       ERR 
00001054  BC3C 0039                 44          CMP.B       #$39,D6 
00001058  6E16                      45          BGT.B       ALPHA    
0000105A  0406 0030                 46          SUBI.B      #$30,D6
0000105E  6000 0026                 47          BRA         AddressCounting
00001062                            48  
00001062  43F9 000012F4             49  ERR     LEA         ERRM,A1
00001068  103C 000E                 50          MOVE.B      #14,D0  
0000106C  4E4F                      51          TRAP        #15    
0000106E  60A0                      52          BRA         InputS   
00001070                            53          
00001070  0C06 0041                 54  ALPHA   CMPI.B      #$41,D6 
00001074  6DEC                      55          BLT.B       ERR
00001076  0C06 0046                 56          CMPI.B      #$46,D6 
0000107A  6EE6                      57          BGT.B       ERR 
0000107C  0406 0037                 58          SUBI.B      #$37,D6
00001080  6000 0004                 59          BRA         AddressCounting    
00001084  4E75                      60          RTS
00001086                            61          
00001086  DA06                      62  AddressCounting   ADD.B   D6,D5 
00001088  5303                      63                    SUBI.B  #1,D3  
0000108A  B63C 0000                 64                    CMP.B   #$0,D3    
0000108E  6700 000A                 65                    BEQ     StartingAd          
00001092  E985                      66                    ASL.L   #$04,D5
00001094  B63C 0000                 67                    CMP.B   #$0,D3
00001098  66B2                      68                    BNE     AtoH
0000109A                            69  
0000109A  5304                      70  StartingAd        SUBI.B  #1,D4
0000109C  B83C 0000                 71                    CMP.B   #$0,D4
000010A0  6700 000C                 72                    BEQ     EndingAd
000010A4  23C5 00001192             73                    MOVE.L  D5,Addr1
000010AA  4EF8 102C                 74                    JMP     InputE
000010AE                            75  
000010AE                            76  ** Addr1 now contains the ending address
000010AE                            77  ** Addr2 now contains the starting address
000010AE  23C5 00001196             78  EndingAd          MOVE.L  D5,Addr2                            
000010B4  2C79 00001192             79                    MOVE.L  Addr1,A6
000010BA                            80                    
000010BA                            81  ** Use A6 for current address?
000010BA                            82  CHECK_ENDING
000010BA  2A79 00001196             83                    MOVE.L  Addr2,A5
000010C0  BBCE                      84                    CMPA.L  A6,A5
000010C2  6700 00A0                 85                    BEQ     ENDING
000010C6  548E                      86                    ADD.L   #$2,A6
000010C8  6000 0002                 87                    BRA     PRINT_CURRENT_ADR
000010CC                            88                    
000010CC                            89                    
000010CC                            90  ** EXPECT: Clear registers, current address at A6
000010CC                            91  PRINT_CURRENT_ADR
000010CC  4EB9 00001164             92                    JSR     CLEAR_REGISTERS
000010D2  240E                      93                    MOVE.L  A6,D2
000010D4  1A3C 0000                 94                    MOVE.B  #0,D5
000010D8  1C3C 0004                 95                    MOVE.B  #4,D6  * Loop 4 times
000010DC                            96                    
000010DC                            97  CHECK_LOOP
000010DC  BC05                      98                    CMP.B   D5,D6
000010DE  6600 0010                 99                    BNE     CONVERT_HEX_TO_ASCII
000010E2  43F9 000012B7            100                    LEA     NEWLINE,A1
000010E8  103C 000E                101                    MOVE.B  #14,D0
000010EC  4E4F                     102                    TRAP    #15
000010EE  60CA                     103                    BRA     CHECK_ENDING
000010F0                           104                    
000010F0                           105  CONVERT_HEX_TO_ASCII
000010F0  2602                     106                    MOVE.L  D2,D3
000010F2  0A83 00FFFFFF            107                    EOR.L   #%00000000111111111111111111111111,D3  
000010F8  C682                     108                    AND.L   D2,D3
000010FA  E08B                     109                    LSR.L   #8,D3
000010FC  E08B                     110                    LSR.L   #8,D3
000010FE  E08B                     111                    LSR.L   #8,D3      * D3 has leftmost byte
00001100  1803                     112                    MOVE.B  D3,D4 
00001102  0A04 000F                113                    EOR.B   #%00001111,D4
00001106  C803                     114                    AND.B   D3,D4   
00001108  E80C                     115                    LSR.B   #4,D4       * D4 has left 4 bits
0000110A  4EB9 00001124            116                    JSR     CHECK_CHAR
00001110  1803                     117                    MOVE.B  D3,D4
00001112  0A04 00F0                118                    EOR.B   #%11110000,D4
00001116  C803                     119                    AND.B   D3,D4      * D4 has right 4 bits
00001118  4EB9 00001124            120                    JSR     CHECK_CHAR
0000111E  E182                     121                    ASL.L   #8,D2       * Shift original left 1 byte
00001120  5205                     122                    ADDI.B  #1,D5
00001122  60B8                     123                    BRA     CHECK_LOOP
00001124                           124  
00001124                           125  CHECK_CHAR
00001124  B83C 000A                126                    CMP.B   #$A,D4
00001128  6D00 0010                127                    BLT     HEX_TO_NUM
0000112C  0604 0037                128                    ADDI.B  #$37,D4
00001130  1204                     129                    MOVE.B  D4,D1
00001132  4EB9 00001148            130                    JSR     PRINT_CHAR
00001138  4E75                     131                    RTS
0000113A                           132          
0000113A                           133  HEX_TO_NUM
0000113A  0604 0030                134                    ADDI.B  #$30,D4
0000113E  1204                     135                    MOVE.B  D4,D1
00001140  4EB9 00001148            136                    JSR     PRINT_CHAR
00001146  4E75                     137                    RTS
00001148                           138                    
00001148                           139  PRINT_CHAR
00001148  103C 0006                140                    MOVE.B  #6,D0
0000114C  4E4F                     141                    TRAP    #15
0000114E  4281                     142                    CLR.L   D1
00001150  4E75                     143                    RTS
00001152                           144                  
00001152                           145  ** Jump Table **
00001152  4EB9 0000115E            146                    JSR     OPCODE_RTS
00001158  4EB9 00001164            147                    JSR     OPCODE_JSR
0000115E                           148  
0000115E                           149  
0000115E                           150  OPCODE_RTS
0000115E  0C78 4E75 0000           151                    CMPI.W   #$4E75,$0000
00001164                           152  
00001164                           153  OPCODE_JSR
00001164                           154  
00001164                           155  ENDING
00001164                           156  
00001164                           157  
00001164                           158  
00001164                           159  
00001164                           160  
00001164                           161  CLEAR_REGISTERS
00001164  4280                     162          CLR.L   D0
00001166  4285                     163          CLR.L   D5
00001168  4282                     164          CLR.L   D2
0000116A  4281                     165          CLR.L   D1
0000116C  4283                     166          CLR.L   D3
0000116E  4284                     167          CLR.L   D4
00001170  4286                     168          CLR.L   D6
00001172  227C 00000000            169          MOVE.L  #$00000000,A1
00001178  247C 00000000            170          MOVE.L  #$00000000,A2
0000117E  267C 00000000            171          MOVE.L  #$00000000,A3
00001184  287C 00000000            172          MOVE.L  #$00000000,A4
0000118A  2A7C 00000000            173          MOVE.L  #$00000000,A5
00001190  4E75                     174          RTS
00001192                           175          
00001192                           176  *---------------------------------------------------------------------
00001192                           177  *Variable
00001192                           178  *---------------------------------------------------------------------
00001192                           179  Addr1       DS.L    1
00001196                           180  Addr2       DS.L    1   
0000119A                           181  *---------------------------------------------------------------------
0000119A                           182  *MESSAGE
0000119A                           183  *---------------------------------------------------------------------
0000119A  =0000000D                184  CR      EQU     $0D             ASCII code for Carriage Return
0000119A  =0000000A                185  LF      EQU     $0A             ASCII code for Line Feed
0000119A                           186  
0000119A= 57 65 6C 63 6F 6D ...    187  GREETING_MSG    DC.B    'Welcome to A Disassembler for the Motorola MC68000 Microprocessor',CR,LF
000011DD= 54 79 70 65 20 79 ...    188                  DC.B    'Type your address that must be 8 hexdecimal characters',CR,LF
00001215= 54 68 65 20 53 74 ...    189                  DC.B    'The Starting address must be greater than $00001000.',CR,LF
0000124B= 54 68 65 20 65 6E ...    190                  DC.B    'The ending address must be greater than the starting address.',CR,LF 
0000128A= 54 68 65 20 61 64 ...    191                  DC.B    'The address should be even number address!',CR,LF,0
000012B7                           192                  
000012B7= 0D 0A 00                 193  NEWLINE         DC.B    CR,LF,0
000012BA                           194  
000012BA= 45 6E 74 65 72 20 ...    195  MessageSt               DC.B         'Enter the starting address:',CR,LF,0    
000012D8                           196  
000012D8= 45 6E 74 65 72 20 ...    197  MessageEn               DC.B         'Enter the Ending address:',CR,LF,0 
000012F4                           198  
000012F4= 45 6E 74 65 72 20 ...    199  ERRM         DC.B     'Enter Valid hexadecimal value: ', 0
00001314                           200  *---------------------------------------------------------------------          
00001314                           201      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               1192
ADDR2               1196
ADDRESSCOUNTING     1086
ALPHA               1070
ATOH                104C
CHECK_CHAR          1124
CHECK_ENDING        10BA
CHECK_LOOP          10DC
CLEAR_REGISTERS     1164
CONVERT_HEX_TO_ASCII  10F0
CR                  D
ENDING              1164
ENDINGAD            10AE
ERR                 1062
ERRM                12F4
GREETING_MSG        119A
HEX_TO_NUM          113A
INPUTE              102C
INPUTS              1010
LF                  A
MESSAGEEN           12D8
MESSAGEST           12BA
NEWLINE             12B7
OPCODE_JSR          1164
OPCODE_RTS          115E
PRINT_CHAR          1148
PRINT_CURRENT_ADR   10CC
START               1000
STARTINGAD          109A
